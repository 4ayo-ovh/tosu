import fs from 'fs';

import { wLogger } from '@/logger';

import utils from '.';

const loaderBytes = Buffer.from([
    0x51, 0x57, 0x8b, 0x7c, 0x24, 0x0c, 0x85, 0xff, 0x75, 0x08, 0x8d, 0x47,
    0x01, 0x5f, 0x59, 0xc2, 0x04, 0x00, 0x8b, 0x47, 0x3c, 0x53, 0x03, 0xc7,
    0x55, 0x8b, 0xef, 0x89, 0x44, 0x24, 0x14, 0x56, 0x2b, 0x68, 0x34, 0x74,
    0x6f, 0x83, 0xb8, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x75, 0x0d, 0x5e, 0x5d,
    0x5b, 0xb8, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x59, 0xc2, 0x04, 0x00, 0x8b,
    0x98, 0xa0, 0x00, 0x00, 0x00, 0x03, 0xdf, 0x83, 0x3b, 0x00, 0x74, 0x4c,
    0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x73, 0x04, 0x8d,
    0x43, 0x04, 0x83, 0xee, 0x08, 0x89, 0x44, 0x24, 0x10, 0xd1, 0xee, 0x8d,
    0x53, 0x08, 0x74, 0x25, 0x0f, 0xb7, 0x02, 0x66, 0x8b, 0xc8, 0x66, 0xc1,
    0xe9, 0x0c, 0x80, 0xf9, 0x03, 0x75, 0x0a, 0x25, 0xff, 0x0f, 0x00, 0x00,
    0x03, 0x03, 0x01, 0x2c, 0x38, 0x83, 0xc2, 0x02, 0x83, 0xee, 0x01, 0x75,
    0xdf, 0x8b, 0x44, 0x24, 0x10, 0x03, 0x18, 0x83, 0x3b, 0x00, 0x75, 0xc0,
    0x8b, 0x44, 0x24, 0x18, 0x83, 0xb8, 0x84, 0x00, 0x00, 0x00, 0x00, 0x74,
    0x7f, 0x8b, 0xa8, 0x80, 0x00, 0x00, 0x00, 0x03, 0xef, 0x83, 0x7d, 0x0c,
    0x00, 0x74, 0x71, 0x0f, 0x1f, 0x44, 0x00, 0x00, 0x8b, 0x4d, 0x0c, 0x8b,
    0x07, 0x03, 0xcf, 0x51, 0xff, 0xd0, 0x89, 0x44, 0x24, 0x10, 0x85, 0xc0,
    0x0f, 0x84, 0xb7, 0x00, 0x00, 0x00, 0x8b, 0x55, 0x00, 0x8b, 0x75, 0x10,
    0x8d, 0x0c, 0x3a, 0x85, 0xc9, 0x8d, 0x1c, 0x3e, 0x0f, 0x45, 0xf2, 0x03,
    0xf7, 0x8b, 0x06, 0x85, 0xc0, 0x74, 0x30, 0x90, 0x8b, 0x4f, 0x08, 0x85,
    0xc0, 0x79, 0x05, 0x0f, 0xb7, 0xc0, 0xeb, 0x05, 0x83, 0xc0, 0x02, 0x03,
    0xc7, 0x50, 0xff, 0x74, 0x24, 0x14, 0xff, 0xd1, 0x89, 0x03, 0x85, 0xc0,
    0x0f, 0x84, 0x7b, 0x00, 0x00, 0x00, 0x8b, 0x46, 0x04, 0x83, 0xc6, 0x04,
    0x83, 0xc3, 0x04, 0x85, 0xc0, 0x75, 0xd1, 0x83, 0xc5, 0x14, 0x83, 0x7d,
    0x0c, 0x00, 0x75, 0x98, 0x8b, 0x44, 0x24, 0x18, 0x83, 0xb8, 0xc4, 0x00,
    0x00, 0x00, 0x00, 0x74, 0x20, 0x8b, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x8b,
    0x74, 0x38, 0x0c, 0x85, 0xf6, 0x74, 0x12, 0x8b, 0x06, 0x85, 0xc0, 0x74,
    0x0c, 0x6a, 0x00, 0x6a, 0x01, 0x57, 0xff, 0xd0, 0x83, 0xc6, 0x04, 0x75,
    0xee, 0x8b, 0x47, 0x10, 0x6a, 0x40, 0x68, 0x00, 0x30, 0x00, 0x00, 0x68,
    0x00, 0x04, 0x00, 0x00, 0x6a, 0x00, 0xff, 0xd0, 0x8b, 0x4c, 0x24, 0x18,
    0x8b, 0xf0, 0x56, 0x6a, 0x01, 0x57, 0x8b, 0x49, 0x28, 0x03, 0xcf, 0xff,
    0xd1, 0x85, 0xc0, 0xb9, 0x04, 0x00, 0x00, 0x00, 0x0f, 0x44, 0xf1, 0x8b,
    0xc6, 0x5e, 0x5d, 0x5b, 0x5f, 0x59, 0xc2, 0x04, 0x00, 0x5e, 0x5d, 0x5b,
    0xb8, 0x03, 0x00, 0x00, 0x00, 0x5f, 0x59, 0xc2, 0x04, 0x00
]);

export class Module {
    base: number;
    name: string;
    private process: Process;
    constructor(process: Process, name: string, module: number) {
        this.process = process;
        this.name = name;
        this.base = module;
    }

    public get(func: string): number {
        return utils.getRemoteProcAddress(this.process.handle, this.base, func);
    }

    public get path(): string {
        return utils.getModulePath(this.process.id, this.name);
    }

    public get signature(): string {
        return utils.getPEPdbGuid(fs.readFileSync(this.path));
    }
}

export interface ProcessInfo {
    id: number;
    exeFile: string;
    parentId: number;
    pcPriClassBase: number;
}

export class Process {
    public id: number;
    public handle: number;
    private loader: number;

    constructor(id: number) {
        this.id = id;
        this.handle = utils.openProcess(this.id);
    }

    static findProcess(imageName: string): number {
        return utils.findProcess(imageName);
    }

    static isProcessExist(pid: number): boolean {
        return utils.isProcessExist(pid);
    }

    kill(): void {
        utils.killProcess(this.handle);
    }

    inject(
        buffer: Buffer,
        queueApc: boolean = false,
        threadHandle: number = 0
    ): number {
        if (!this.loader) {
            this.loader = this.alloc(loaderBytes.length);
            this.writeBytes(this.loader, loaderBytes);
        }

        return utils.injectLibrary(
            buffer,
            this.handle,
            this.loader,
            queueApc,
            threadHandle
        );
    }

    inject2(buffer: Buffer): number {
        return utils.injectLibrary2(buffer, this.handle);
    }

    writeByte(address: number, value: number): void {
        utils.writeByte(this.handle, address, value);
    }

    writeBytes(address: number, value: Buffer): void {
        utils.writeBytes(this.handle, address, value);
    }

    // write int16
    writeShort(address: number, value: number): void {
        this.writeBytes(
            address,
            Buffer.from(
                Buffer.from([value & 0xff, (value >> 8) & 0xff]).reverse()
            )
        );
    }

    writeInt32(address: number, value: number): void {
        this.writeBytes(
            address,
            Buffer.from(
                Buffer.from([
                    value & 0xff,
                    (value >> 8) & 0xff,
                    (value >> 16) & 0xff,
                    (value >> 24) & 0xff
                ])
            )
        );
    }

    alloc(size: number): number {
        return utils.alloc(this.handle, size);
    }

    readByte(address: number): number {
        return utils.readByte(this.handle, address);
    }

    readShort(address: number): number {
        return utils.readShort(this.handle, address);
    }

    readInt(address: number): number {
        return utils.readInt(this.handle, address);
    }

    readPointer(address: number): number {
        return this.readInt(this.readInt(address));
    }

    readLong(address: number): number {
        return utils.readLong(this.handle, address);
    }

    readFloat(address: number): number {
        return utils.readFloat(this.handle, address);
    }

    readDouble(address: number): number {
        return utils.readDouble(this.handle, address);
    }

    readString(address: number): string {
        return utils.readString(this.handle, address);
    }

    /* dumbass thing ever... please pr this, if you know, how to deal with that better... */
    readSharpString(address: number): string {
        const length = this.readInt(address + 0x4);
        if (length < 0 || length > 4096) {
            return '';
        }
        const endString = this.readBuffer(address + 0x8, length * 2).toString(
            'utf16le'
        );

        return endString;
    }

    readBuffer(address: number, size: number): Buffer {
        return utils.readBuffer(this.handle, address, size);
    }

    scanSync(
        pattern: string,
        refresh: boolean = false,
        baseAddress: number = 0
    ): number {
        let buffer = Buffer.from(
            pattern
                .split(' ')
                .map((x) => (x === '??' ? '00' : x))
                .join(''),
            'hex'
        );

        return utils.scanSync(this.handle, baseAddress, buffer, refresh);
    }

    scan(
        pattern: string,
        callback: (address: number) => void,
        refresh: boolean = false,
        baseAddress: number = 0
    ): void {
        let buffer = Buffer.from(
            pattern
                .split(' ')
                .map((x) => (x === '??' ? '00' : x))
                .join(''),
            'hex'
        );

        utils.scan(this.handle, baseAddress, buffer, refresh, callback);
    }

    getModule(moduleName: string): Module {
        return new Module(
            this,
            moduleName,
            utils.getRemoteModuleHandle(this.handle, moduleName)
        );
    }

    getBaseModuleAddress(): number {
        return utils.getMainModuleBaseAddress(this.handle);
    }

    static getProcesses(): Array<ProcessInfo> {
        return utils.getProcesses();
    }
}
